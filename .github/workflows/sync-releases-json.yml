name: Sync GitHub Releases to JSON

on:
  release:
    types: [published, edited, deleted]
  workflow_dispatch:  # Just to show this workflow in the Actions tab

jobs:
  sync:
    # Only run on release events, skip manual triggers
    if: github.event_name != 'workflow_dispatch' && github.event.release.draft == false && !(github.event.action == 'edited' && github.event.changes.draft.from == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Dump release event to JSON file
        run: |
          echo '${{ toJson(github.event.release) }}' > release-data.json

      - name: Update releases JSON
        id: update-json
        env:
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
        run: |
          node <<'EOF'
          const fs = require('fs');

          const action = process.env.GITHUB_EVENT_ACTION;
          const release = JSON.parse(fs.readFileSync('release-data.json', 'utf8'));

          const isPrerelease = release.prerelease;
          const file = isPrerelease ? 'releases-pre.json' : 'releases.json';
          const hasFile = fs.existsSync(file);

          const existing = hasFile ? JSON.parse(fs.readFileSync(file, 'utf8')) : [];
          let map = new Map(existing.map(r => [r.version, r]));

          const version = release.tag_name;
          let changedVersions = [];
          let removed = false;

          if (action === 'deleted') {
            if (map.has(version)) {
              map.delete(version);
              removed = true;
            }
            if (!hasFile && map.size === 0) {
              console.log(`No releases left and ${file} file did not exist â€” skipping file creation and commit.`);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `skip_commit=true\n`);
              process.exit(0);
            }
          } else { // 'published' or 'edited'
            const assets = release.assets.map(a => {
              // const [algorithm, hash] = a.digest.split(':');  // sha256:...
              return {
                name: a.name,
                url: a.browser_download_url,
                size: a.size,
                digest: a.digest
              };
            });
            const entry = {
              version,
              url: release.html_url,
              assets
            };

            if (map.has(version)) {
              // edited
              if (JSON.stringify(map.get(version)) !== JSON.stringify(entry)) {
                map.set(version, entry);
                changedVersions.push(version);
              }
            } else {
              // published
              map = new Map([[version, entry], ...map]);
              changedVersions.push(version);
            }
          }

          fs.writeFileSync(file, JSON.stringify([...map.values()], null, 2) + '\n');
          fs.appendFileSync(process.env.GITHUB_OUTPUT, [
            `skip_commit=false`,
            `file=${file}`,
            `initial=${!hasFile}`,
            `changed_versions=${changedVersions.join(',')}`,
            `removed=${removed}`
          ].join('\n') + '\n');
          EOF

      - name: Commit and push if changed
        if: steps.update-json.outputs.skip_commit != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          FILE="${{ steps.update-json.outputs.file }}"
          git add "$FILE"

          if ! git diff --cached --quiet; then
            INITIAL="${{ steps.update-json.outputs.initial }}"
            CHANGED_VERSIONS="${{ steps.update-json.outputs.changed_versions }}"
            REMOVED="${{ steps.update-json.outputs.removed }}"

            IFS=',' read -r -a VERSIONS <<< "$CHANGED_VERSIONS"
            ADDED_COUNT="${#VERSIONS[@]}"

            if [ "$INITIAL" = "true" ]; then
              MSG="Initial $FILE"
            elif [ "$ADDED_COUNT" -gt 0 ]; then
              MSG="Update $FILE for version ${VERSIONS[0]}"
            elif [ "$REMOVED" = "true" ]; then
              MSG="chore: sync $FILE"
            else
              MSG="Update $FILE"
            fi

            git commit -m "$MSG"
            git push
          else
            echo "No commit: file unchanged"
          fi
